@startuml
skinparam agent {
    backgroundcolor #white
    bordercolor #black
}
skinparam cloud {
    backgroundcolor #white
    bordercolor #black
}

' d
' Procedure for PFD process in/out with draft mode
' [in] $outputs Process outputs. It should be written as string with "," delimiter.
' [in] $inputs  Process inputs. It should be written as string with "," delimiter.
' [in] $process Specify process
!procedure $d($outputs, $inputs, $process)
  $process_in($process, $inputs, "true")
  $process_out($process, $outputs, "true")
!endprocedure

' p
' Procedure for PFD process in/out with normal mode
' [in] $outputs Process outputs. It should be written as string with "," delimiter.
' [in] $inputs  Process inputs. It should be written as string with "," delimiter.
' [in] $process Specify process
!procedure $p($outputs, $inputs, $process)
  $process_in($process, $inputs)
  $process_out($process, $outputs)
!endprocedure

' process_in
' Procedure for PFD process input
' [in] $process Specify process
' [in] $inputs  Process inputs. It should be written as string with "," delimiter.
' [in] $draft   If specified, make models (optional)
!procedure $process_in($process, $inputs, $draft="")
  $process_common($process, $inputs, "i", $draft)
!endprocedure

' pin
' Short alias of process_in
!procedure $pin($process, $inputs, $draft="")
  $process_in($process, $inputs, $draft)
!endprocedure

' din
' Short alias of process_in (draft)
!procedure $din($process, $inputs)
  $process_in($process, $inputs, "true")
!endprocedure

' process_out
' Procedure for PFD process output
' [in] $process  Specify process
' [in] $outputs  Process outputs. It should be written as string with "," delimiter.
' [in] $draft    If specified, make models (optional)
!procedure $process_out($process, $outputs, $draft="")
  $process_common($process, $outputs, "o", $draft)
!endprocedure

' pout
' Short alias of process_out
!procedure $pout($process, $outputs, $draft="")
  $process_out($process, $outputs, $draft)
!endprocedure

' dout
' Short alias of process_out (draft)
!procedure $dout($process, $outputs)
  $process_out($process, $outputs, "true")
!endprocedure

' process_common
' Common procedure for both in/out
' Note: This should called by other procedure
' [in] $process   Specify process
' [in] $inout     Process inputs/outputs. It should be written as string with "," delimiter.
' [in] $mode      Mode of inout (ex. "i" or "o")
' [in] $draft     If specified, make models (optional)
!procedure $process_common($process, $inout, $mode, $draft="")
  ' Add usecase type model as process
  !if ($draft != "")
    usecase "$process" as $replace($process)
  !endif

  ' Repeat by ","
  !while ($minpos($inout) > 0)
    ' Separate string by ","
    !$sub = %substr($inout, 0, $minpos($inout))

    ' Add agent type model as input
    !if ($draft != "")
      !if ($is_cloud($sub) == %true())
        ' remove prefix
        !$sub = %substr($sub, 2, %strlen($sub))
        cloud "$sub" as $replace($sub)
      !else
        agent "$sub" as $replace($sub)
      !endif
    !endif
    ' Decide connection direction
    !if ($mode == "i")
      $replace($sub) --> $replace($process)
    !else
      $replace($process) --> $replace($sub)
    !endif

    ' Update $inout
    !$inout = %substr($inout, $minpos($inout) + 1)
  !endwhile

  !if ($draft != "")
    !if ($is_cloud($inout) == %true())
      ' remove prefix
      !$inout = %substr($inout, 2, %strlen($inout))
      cloud "$inout" as $replace($inout)
    !else
      agent "$inout" as $replace($inout)
    !endif
  !endif

  ' last element
  !if ($mode == "i")
    $replace($inout) --> $replace($process)
  !else
    $replace($process) --> $replace($inout)
  !endif
!endprocedure


' minpos function
' Return smaller position of delimiter
' [in] string
!function $minpos($string)
  ' delimiter
  !$len_to_comma = %strpos($string, ",")
  !$len_to_space = %strpos($string, " ")

  ' Comparing variable and negative value does not work well.
  !if ($len_to_comma > 0) && ($len_to_space > 0)
    !if ($len_to_comma > $len_to_space)
      !$return = $len_to_space
    !else
      !$return = $len_to_comma
    !endif
  !elseif ($len_to_comma > 0)
    !$return = $len_to_comma
  !elseif ($len_to_space > 0)
    !$return = $len_to_space
  !else
    !$return = $len_to_space
  !endif
  !return $return
!endfunction


' replace
' Replace symbol character to "_"
' [in] string
!function $replace($string)
  !local $index = 0
  !local $ret_str = ""
  !while $index != %strlen($string)
    !local $sub = %substr($string, $index, 1)

    ' replace symbol to "_"
    !if %strpos("!?#/-()^:！？＃・－～（）＾＿￥：", $sub) >= 0
      !local $sub = "_"
    !endif

    !$ret_str = $ret_str + $sub
    !$index = $index + 1
  !endwhile
  !return $ret_str
!endfunction

' is_cloud
' Judge specified string meet the condition of cloud element
' [in] string
!function $is_cloud($string)
  !if %strpos($string, "c:") == 0
    !return %true()
  !else
    !return %false()
  !endif
!endfunction

@enduml
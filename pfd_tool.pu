@startuml
' Color setting
skinparam agent {
    backgroundcolor #white
    bordercolor #black
    ArrowColor #black
}
skinparam cloud {
    backgroundcolor #white
    bordercolor #black
    ArrowColor #black
}
skinparam usecase {
    backgroundcolor #white
    bordercolor #black
    ArrowColor #black
}
skinparam note {
    BackgroundColor White
    BorderColor Black
}

' Default delimiter
' If you want to use other than "," as separator, please modify or overwrite this.
!$default_delimiter = ","

' Delimiter setting
' If you familiar with English, It might be better not to use SPACE as delimiter.
' 1: Use space as delimiter (default)
' 0: Not use space as delimiter (comma only)
!$space_delimiter = 1

' Invalid constant
' %strpos() returns -1 if not matched.
' But this value seems not comparable value.
!$invalid_value = 65535

' d
' Procedure for PFD process in/out with draft mode
' [in] $outputs Process outputs. It should be written as string with "," delimiter.
' [in] $inputs  Process inputs. It should be written as string with "," delimiter.
' [in] $process Specify process
!procedure $d($outputs, $inputs, $process)
  $process_in($process, $inputs, "true")
  $process_out($process, $outputs, "true")
!endprocedure

' p
' Procedure for PFD process in/out with normal mode
' [in] $outputs Process outputs. It should be written as string with "," delimiter.
' [in] $inputs  Process inputs. It should be written as string with "," delimiter.
' [in] $process Specify process
!procedure $p($outputs, $inputs, $process)
  $process_in($process, $inputs)
  $process_out($process, $outputs)
!endprocedure

' process_in
' Procedure for PFD process input
' [in] $process Specify process
' [in] $inputs  Process inputs. It should be written as string with "," delimiter.
' [in] $draft   If specified, make models (optional)
!procedure $process_in($process, $inputs, $draft="")
  $process_common($process, $inputs, "i", $draft)
!endprocedure

' pin
' Short alias of process_in
!procedure $pin($process, $inputs, $draft="")
  $process_in($process, $inputs, $draft)
!endprocedure

' din
' Short alias of process_in (draft)
!procedure $din($process, $inputs)
  $process_in($process, $inputs, "true")
!endprocedure

' process_out
' Procedure for PFD process output
' [in] $process  Specify process
' [in] $outputs  Process outputs. It should be written as string with "," delimiter.
' [in] $draft    If specified, make models (optional)
!procedure $process_out($process, $outputs, $draft="")
  $process_common($process, $outputs, "o", $draft)
!endprocedure

' pout
' Short alias of process_out
!procedure $pout($process, $outputs, $draft="")
  $process_out($process, $outputs, $draft)
!endprocedure

' dout
' Short alias of process_out (draft)
!procedure $dout($process, $outputs)
  $process_out($process, $outputs, "true")
!endprocedure

' process_common
' Common procedure for both in/out
' Note: This should called by other procedure
' [in] $process   Specify process
' [in] $inout     Process inputs/outputs. It should be written as string with "," delimiter.
' [in] $mode      Mode of inout (ex. "i" or "o")
' [in] $draft     If specified, make models (optional)
!procedure $process_common($process, $inout, $mode, $draft="")
  ' Add usecase type model as process
  !if ($draft != "")
    usecase "$process" as $replace($process)
  !endif

  ' Repeat by ","
  !while (%strlen($inout) >= $minpos($inout))
    ' Separate string by ","
    !local $sub = %substr($inout, 0, $minpos($inout))

    ' Add agent type model as input
    !if ($draft != "")
      !if ($is_cloud($sub) == %true())
        ' remove prefix
        !local $sub = %substr($sub, 2, %strlen($sub))
        cloud "$sub" as $replace($sub)
      !else
        agent "$sub" as $replace($sub)
      !endif
    !endif
    ' Decide connection direction
    !if ($mode == "i")
      $replace($sub) --> $replace($process)
    !else
      $replace($process) --> $replace($sub)
    !endif

    ' Update $inout
    !$inout = %substr($inout, $minpos($inout) + 1)
  !endwhile

  !if (%strlen($inout) != 0)
    !if ($draft != "")
      !if ($is_cloud($inout) == %true())
        ' remove prefix
        !$inout = %substr($inout, 2, %strlen($inout))
        cloud "$inout" as $replace($inout)
      !else
        agent "$inout" as $replace($inout)
      !endif
    !endif

    ' last element
    !if ($mode == "i")
      $replace($inout) --> $replace($process)
    !else
      $replace($process) --> $replace($inout)
    !endif
  !endif
!endprocedure

' c
' Overwrite deliverable element with specified color.
' [in] $color   Specify color
' [in] $inout   Process inputs/outputs. It should be written as string with "," delimiter.
!procedure $c($color, $inout)
  ' Repeat by ","
  !while (%strlen($inout) >= $minpos($inout))
    ' Separate string by ","
    !local $sub = %substr($inout, 0, $minpos($inout))

    ' Add agent type model as input
    !if ($draft != "")
      !if ($is_cloud($sub) == %true())
        ' remove prefix
        !local $sub = %substr($sub, 2, %strlen($sub))
        cloud "$sub" as $replace($sub) $color
      !else
        agent "$sub" as $replace($sub) $color
      !endif
    !endif

    ' Update $inout
    !$inout = %substr($inout, $minpos($inout) + 1)
  !endwhile

  !if ($draft != "")
    !if ($is_cloud($inout) == %true())
      ' remove prefix
      !$inout = %substr($inout, 2, %strlen($inout))
      cloud "$inout" as $replace($inout) $color
    !else
      agent "$inout" as $replace($inout) $color
    !endif
  !endif
!endprocedure

' cp
' Overwrite process element with specified color.
' [in] $color   Specify color
' [in] $inout   Processes. It should be written as string with "," delimiter.
!procedure $cp($color, $inout)
  ' Repeat by ","
  !while (%strlen($inout) >= $minpos($inout))
    ' Separate string by ","
    !local $sub = %substr($inout, 0, $minpos($inout))

    ' Add usecase type model as input
    !if ($draft != "")
      usecase "$sub" as $replace($sub) $color
    !endif

    ' Update $inout
    !$inout = %substr($inout, $minpos($inout) + 1)
  !endwhile

  !if ($draft != "")
    usecase "$inout" as $replace($inout) $color
  !endif
!endprocedure

' minpos function
' Return smaller position of delimiter
' [in] string
!function $minpos($string)
  ' delimiter
  !if %strpos($string, $default_delimiter) >= 0
    !local $len_to_comma = %strpos($string, $default_delimiter)
  !else
    !local $len_to_comma = $invalid_value
  !endif
  !if %strpos($string, " ") >= 0
    !local $len_to_space = %strpos($string, " ")
  !else
    !local $len_to_space = $invalid_value
  !endif

  !if ($space_delimiter != 1)
    ' Not use space as delimiter
    !local $len_to_space = $invalid_value
  !endif

  ' Comparing variable and negative value does not work well.
  !if ($len_to_comma == $invalid_value) && ($len_to_space == $invalid_value)
    !local $retval = $invalid_value
  !elseif ($len_to_comma == $invalid_value)
    !local $retval = $len_to_space
  !elseif ($len_to_space == $invalid_value)
    !local $retval = $len_to_comma
  !else
    ' Both values are not invalid
    !if ($len_to_comma > $len_to_space)
      !local $retval = $len_to_space
    !else
      !local $retval = $len_to_comma
    !endif
  !endif
  !return $retval
!endfunction


' replace
' Replace symbol or other special string to ""
' Because alias should not include symbol etc.
' [in] string
' [ret] replaced string
!function $replace($string)
  !local $string = $replace_newline($string)
  !local $string = $replace_symbol($string)
  !return $string
!endfunction

' replace_symbol
' Replace symbol character to ""
' [in] string
' [ret] replaced string
!function $replace_symbol($string)
  !local $index = 0
  !local $ret_str = ""
  !while $index != %strlen($string)
    !local $sub = %substr($string, $index, 1)

    ' replace symbol to ""
    !if %strpos("!?#/-()^:'[] ！？＃・－～（）＾＿￥：", $sub) >= 0
      !local $sub = "_"
    !endif

    !$ret_str = $ret_str + $sub
    !$index = $index + 1
  !endwhile
  !return $ret_str
!endfunction

' replace_newline
' Replace "\n" to ""
' [in] string
' [ret] replaced string
!function $replace_newline($string)
  !local $index = 0
  !local $ret_str = ""
  !while $index < %strlen($string)
    ' Get two chars as unit for "\n" check
    !local $sub = %substr($string, $index, 2)
    ' replace \n to ""
    !if %strpos("\n", $sub) >= 0
      !local $sub = ""
    !endif

    !if ($sub == "")
      ' Replaced
      !$ret_str = $ret_str + $sub
      ' Due to 2 char replaced, increment index 2
      !$index = $index + 2
    !else
      ' Not replaced
      ' First char is confirmed to use
      !$ret_str = $ret_str + %substr($sub, 0, 1)
      !$index = $index + 1
    !endif
  !endwhile
  !return $ret_str
!endfunction


' is_cloud
' Judge specified string meet the condition of cloud element
' [in] string
' [ret] true: string is cloud element, false: string is NOT cloud element
!function $is_cloud($string)
  !if %strpos($string, "c:") == 0
    !return %true()
  !else
    !return %false()
  !endif
!endfunction


' CRT(Current Reality Tree)
' [in] $result    Specify result
' [in] $cause     Causes of result. It should be written as string with "," delimiter.
' [in] $draft     If specified, make models (optional, default as true)
!procedure $crt($result, $cause, $draft="true")
  ' Add usecase type model as process
  !if ($draft != "")
    agent "$result" as $replace($result)
  !endif

  ' Repeat by ","
  !while (%strlen($cause) >= $minpos($cause))
    ' Separate string by ","
    !local $sub = %substr($cause, 0, $minpos($cause))

    ' Add agent type model as input
    !if ($draft != "")
      agent "$sub" as $replace($sub)
    !endif

    ' Decide connection direction
    $replace($result) <-- $replace($sub)

    ' Update $inout
    !$cause = %substr($cause, $minpos($cause) + 1)
  !endwhile

  !if (%strlen($cause) != 0)
    !if ($draft != "")
      agent "$cause" as $replace($cause)
    !endif

    ' last element
    $replace($result) <-- $replace($cause)
  !endif
!endprocedure

' Evaporating cloud(head)
' [in] $mission   The mission of the cloud
!procedure $head($mission)
  agent "$mission" as head
!endprocedure

' Evaporating cloud(shoulder-hand)
' [in] $mission   The mission of the cloud
!procedure $shoulder_hand($shoulder, $hand, $left_right)
  agent "$shoulder" as $left_right##_shoulder
  agent "$hand" as $left_right##_hand
  head <-- $left_right##_shoulder
  $left_right##_shoulder <-- $left_right##_hand
!endprocedure

' Evaporating cloud(right)
' [in] $mission   The mission of the cloud
!procedure $right($shoulder, $hand)
  $shoulder_hand($shoulder, $hand, "right")
!endprocedure

' Evaporating cloud(left)
' [in] $mission   The mission of the cloud
!procedure $left($shoulder, $hand)
  $shoulder_hand($shoulder, $hand, "left")
!endprocedure

' Evaporating cloud(connect)
' [in] $mission   The mission of the cloud
!procedure $connect()
  left_hand <=> right_hand #red
  left_shoulder <.. right_hand #Blue
  right_shoulder <.. left_hand #Blue
!endprocedure

@enduml
@startuml
' Color setting
hide circle
hide empty members
hide method
skinparam linetype polyline
skinparam linetype ortho
skinparam usecase {
BackgroundColor White
ArrowColor Black
BorderColor Black
FontSize 12
}
skinparam class {
BackgroundColor White
ArrowColor Black
BorderColor Black
}
skinparam note {
BackgroundColor White
ArrowColor Black
BorderColor Black
FontSize 12
}
allowmixing

' Default delimiter
' If you want to use other than "," as separator, please modify or overwrite this.
!$default_delimiter = ","

' Delimiter setting
' If you familiar with English, It might be better not to use SPACE as delimiter.
' 1: Use space as delimiter (default)
' 0: Not use space as delimiter (comma only)
!$space_delimiter = 1

' Invalid constant
' %strpos() returns -1 if not matched.
' But this value seems not comparable value.
!$invalid_value = 65535

' Auto number to entities
!$numbered = 1

' Target length
' Insert newline automatically.
!$target_length = 1024

' Newline at space
' If 1, replace space to newline when current line length exceeded target_length.
!$newline_at_space = 1

' Display detail of not
!$detailed = 1

' req
' Procedure for requirement
!procedure $req($requirements)
  ' Separate $requirements to (title, text) list
  !local $word_list = %splitstr($requirements, ",")
  !local $title_flag = %true()
  !foreach $word in $word_list
    !if ($title_flag == %true())
      ' $word is title
      !local $title = $newline_formatter($word)
    !else
      ' $word is text
      !local $text = $newline_formatter($word)
    !endif
    !if ($title_flag == %false())
      !local $number = $numbering()
      !if ($detailed == 1)
        class "$number##.##$title" as $number <<requirement>> {
          {field}text=$text
        }
      !else
        class "$number##.##$title" as $number <<requirement>>
      !endif
    !endif
    !$title_flag = %not($title_flag)
  !endfor
!endprocedure

' block
' Procedure for block
!procedure $block($blocks)
  ' Separate $requirements to (title, text) list
  !local $word_list = %splitstr($blocks, ",")
  !foreach $word in $word_list
    !local $number = $numbering()
    !$word = $newline_formatter($word)
    class "$number##.##$word" as $number <<block>>
  !endfor
!endprocedure

' Relations parser for Requirement diagram.
' [in] $result_and_causes  List of result and causes separated by ",".
'                          Each result and causes should be "1 < 2 3".
'                          1: result, 2, 3: causes (separated by < or >)
!procedure $connect_req($result_and_causes)
!local $result_and_cause_list = %splitstr($result_and_causes, ",")

' Start from 1 because 0 use to judge char
!local $param_num = 1
!foreach $result_and_cause in $result_and_cause_list
  ' Split result and causes
  !local $results = ""
  !local $causes = ""
  !local $connector = ""
  !local $kind = ""
  !if %strpos($result_and_cause, "+") >= 0
    $separate($result_and_cause, "+")
    !$results = $right_side
    !$causes = $left_side
    !$connector = "+--"
  !endif
  !if %strpos($result_and_cause, "d") >= 0
    $separate($result_and_cause, "d")
    !$results = $right_side
    !$causes = $left_side
    !$connector = "<.."
    !$kind = "<<deriveReqt>>"
  !endif
  !if %strpos($result_and_cause, "s") >= 0
    $separate($result_and_cause, "s")
    !$results = $right_side
    !$causes = $left_side
    !$connector = "<.."
    !$kind = "<<satisfy>>"
  !endif

  ' Split results
  !local $result_list = %splitstr($results, " ")
  !foreach $result in $result_list
    ' Split causes
    !local $cause_list = %splitstr($causes, " ")
    !foreach $cause in $cause_list
      !if $kind == ""
        $result $connector $cause
      !else
        $result $connector $cause: $kind
      !endif
    !endfor
  !endfor
  !local $param_num = $param_num + 1
!endfor
!endprocedure

' numbering
' Increment global variable unique_no.
' Because alias should not include symbol etc.
' [ret] incremented no.
!$unique_no = 0
!function $numbering()
  !$unique_no = $unique_no + 1
  !return $unique_no
!endfunction

' Global variables
!$left_side = ""
!$right_side = ""
' Separate string by separator and update global variables
' [in] target Target string
' [in] separator Separator
' [out] left_side Left half of target string
' [out] right_side Right half of target string
!procedure $separate($target, $separator)
  'Reset variables
  !$left_side = ""
  !$right_side = ""
  !local $separated = %splitstr($target, $separator)
  !local $counter = 0
  !foreach $temp in $separated
    !if $counter == 0
      !$left_side = $temp
    !else
      !$right_side = $temp
    !endif
    !$counter = $counter + 1
  !endfor
!endprocedure

' Insert newline to entity/process
' [in] string Target string
' return Target string (newline inserted)
!function $newline_formatter($string)
  !local $formatted_string = ""
  !if $newline_at_space == 1
    !local $separated_array = %splitstr($string, " ")
    !local $chunk = ""
    !foreach $word in $separated_array
      !$chunk = $chunk + " " + $word
      !if %strlen($chunk) >= $target_length
        !$formatted_string = $formatted_string + $chunk
        !$chunk = "\n"
      !endif
    !endfor
    !if $chunk != "\n"
      !$formatted_string = $formatted_string + $chunk
    !endif
  !else
    !local $start_pos = 0
    !while $start_pos <= %strlen($string) -1
      !if $formatted_string != ""
        !$formatted_string = $formatted_string + "\n"
      !endif
      !$formatted_string = $formatted_string + %substr($string, $start_pos, $target_length)
      !$start_pos = $start_pos + $target_length
    !endwhile
  !endif
  !return $formatted_string
!endfunction

@enduml